generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Study: 사용자/스터디 엔티티 (비밀번호 기반 단순 인증, points 및 배경/닉네임 보유)
model Study {
    id          Int      @id @default(autoincrement()) @map("study_id")
    nickname    String
    name        String
    description String?
    background  String
    password    String
    points      Int      @default(0)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // relations
    habits        Habit[] // 1:N
    habitRecord   HabitRecord? // 1:1
    focusSession  FocusSession? // 1:1
    studyEmojis   StudyEmoji[] // 1:N

    @@map("studies")
}

// Habit: 스터디별 습관 (weeklyClear: 요일별 달성 여부 7자리 비트 문자열)
model Habit {
    id          Int       @id @default(autoincrement()) @map("habit_id")
    studyId     Int       @map("study_id")
    name        String
    weeklyClear String    @default("0|0|0|0|0|0|0")   @map("weekly_clear")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")

    // relations
    study   Study         @relation(fields: [studyId], references: [id], onDelete: Cascade)
    records HabitRecord[] // 1:N

    @@index([studyId])
    @@map("habits")
}

// HabitRecord: Habit 에 대한 추가 기록 (studyId unique -> 1:1, 예비 확장 자리)
model HabitRecord {
    id        Int      @id @default(autoincrement()) @map("record_id")
    studyId   Int      @unique @map("study_id") 
    habitId   Int      @map("habit_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // relations
    study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
    habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

    @@index([habitId])
    @@index([studyId])
    @@map("habit_records")
}

// FocusSession: 스터디별 집중 시간 기록 (1:1)
model FocusSession {
    id        Int      @id @default(autoincrement()) @map("focus_id")
    studyId   Int      @unique @map("study_id")
    duration  Int      @default(0)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)

    @@index([studyId])
    @@map("focus_sessions")
}

// Emoji: 외부 소스에서 가져온 이모지 (unified 값을 id 로 사용)
model Emoji {
    id        String   @id @map("emoji_id") // unified 값을 그대로 저장
    emoji     String    // 실제 이모지 문자
    createdAt DateTime @default(now()) @map("created_at")

    studyEmojis StudyEmoji[] // 1:N

    @@map("emojis")
}

// StudyEmoji: 스터디-이모지 매핑 및 사용 count 집계 (복합 unique)
model StudyEmoji {
    id        Int      @id @default(autoincrement()) @map("study_emoji_id")
    studyId   Int      @map("study_id")
    emojiId   String   @map("emoji_id")
    count     Int      @default(0)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
    emoji Emoji @relation(fields: [emojiId], references: [id], onDelete: Cascade)

    @@unique([studyId, emojiId]) // 스터디+이모지 중복 방지
    @@index([studyId])
    @@index([emojiId])
    @@map("study_emoji")
}